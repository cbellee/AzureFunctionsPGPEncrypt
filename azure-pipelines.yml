# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - main
    - master
  
variables:
    azureSubscription: 'internal_azure_subscription'
    resourceGroupName: 'sftp-rg'
    location: 'australiaeast'
    vmImageName: 'ubuntu-latest'
    configuration: 'Release'
    pgpPassPhrase: 'pepperpoc'
    pgpPublicKey: 'LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tDQpWZXJzaW9uOiBCQ1BHIEMjIHYxLjguNi4wDQoNCm1RSUxCRiszVENVQkVBREdVdjEzUFlRWUEzbGliU0VsS3UvdWh1cGtGUGVEYVFhK3YxYUEzbkVUVFdocXlYTW4NCnF5Y2Q5R2IxSEJjWTZiN2NGZlNxNUhjL05JZm5Ua21UbllhOVNlVEVuNjQ5V1FTcUQzVjBrKzdtbk5KamQ1LzMNCjVzdVFrSmNOSm0zemd1WEE2RTQzVm1xdGpmNk5nYWk1M2JZZlVucGJPNDROUDZrb0RaSEVmMUNLOC9NT2JqYTENCkZBSi9ud2NZdTd6aWhqOVVyRjFpV2lDUVhIOTZrVTBSeUoyZDRJeW93MFkrenZFemNTa2EzbnlXQ1o4anNrUDMNClZaVHRmdE5uOW1NT0JpcTl6ZTBjUHJoS0xZak5CWEU3bWEzeCtJRC9RaXRCZDhDRlVuelIwWURwMDRreER6U2oNCkdsVWx0RVFZanJlNHhNbW9LSVdabGpWbUhSWFlZY2RBdFRjQmVLdmNqSWR3YVNXazhxdnhVMU9RS0FhS2ZQcmYNCkwyc20vSG0vV1AxTUhvSWt4MlUyV0NnOWdzQy9zeXBTdU1VUGVaRklCMGhnVTlPK0tib2o4TWtlSTF5dE8vd2QNCjNYa2xCZ2pkc2publJwanRxcjAxY0dsazFDTlBURWVDSEdSazg3YTlEdVdZWnFGVVNwdVVveWxSSThXUHJZbVUNClJ2WExJVXhDZ3VXMU5ocUVUdFBqMEdOaXNMcmRtOXRvekJHNG9FTnhEcGlTNWl6T0hOOWxiZkFDKzROTHFXN1ANClpyem8zTlYzQWZBYllRRGRjeXVpbWg0d0FYY2RYSDlPL0xRL2U1QS9ZM0R5Y3hDbm1HWERhNGFUelc2QmpmUk4NCmE3dXo3Y09ESitrL2NTek1vazhwS1hkdnplcXlsNUFheDNYYXFBMGNyWjVja0ZaY3YzNlNuNkE0U1FBRkU3UUENCmlRSWNCQkFCQWdBR0JRSmZ0MHdsQUFvSkVCZFRuS0FmbXdYMEU3TVFBSy9LSTdYeVhMMnBsV0l1d2w3TlVnaTkNClVCRU9IQ1RWVTJFMkVBVVJidHE2T0o2TVRINS95b1lJbGtHNTFvNm1nSmNnZXNyVElmRmlWdGZJTTF2S1c5NXQNCkhEaUx3OXZvTDZRUnlRc2MzOWdyaHVJcFkzbitCK0ZETVhuUHZtV1dNeU5rRXZnbmFvdmxLWGE3VHpVVWMyK28NCkFFVVN4L1hMMXpzWHo0RmZ6bWc1OEJESStHMFF4UEhVdXdscjVjSmhsR0RUWjRHenk1YnZvTU9jMWIyalJpQ0INCnh6N3dwWnJGMnoyUytJTURYSjhZcCtHanNVTEVLVVAvZFU5RmNIV09SdVJ1V0dPT0lHWEVOK2RiMkNoWnRSTzcNCko2WVVoQ0w3Y0Vtb1YxZmdOc3JpWUhFL2JFRWxtYitiR0t5QTZGRFpEb3Nqd3lXdzFkQmtnVXZYa0RJZW9MakENCk1zMXdObVNXNzV5OWE3SkNqbU1pYk1oSnpZQk13ZS80SkJORExEamc5VTlIWVRxdnppcHhzeVJFMDZCaHNlQUINCmRWZWhvSEFTUEFKUXp1cFlMYkp1YXdtVE14MUJSMHA4S3NIdCswL3R0MW4wYmhHMXVNSjV2bWVYeTlQS213NjINCmtEWXFtTy9EUlh3bHYrbE84OTRnbjBLTVZDN1VDNHhoYUprV21jWEY4bjVFWnpMQm9OZmk5dGtidjdRWWVWbTQNCkdERHVyQUQzRHZqaWZ6NnQ1ZGN0SzVRekcvMUdXdkZqOGcrcmcxTm0vcjdkd2dMUzRsVzcwNGVBeW4zdlVENkENCm56Wk1ubHdHc0VaMHpNM1hhaUFMYnExUmhBM0dsaUdMSlpyREhFUDQrdDF4cDN3UzRlc2ZuTTcxeWN1Yjc4OXkNCjJpQ3djWXRRbFY4TE8vYk9ibGpEDQo9d1lMOA0KLS0tLS1FTkQgUEdQIFBVQkxJQyBLRVkgQkxPQ0stLS0tLQ0K'
    pgpPrivateKey: 'LS0tLS1CRUdJTiBQR1AgUFJJVkFURSBLRVkgQkxPQ0stLS0tLQ0KVmVyc2lvbjogQkNQRyBDIyB2MS44LjYuMA0KDQpsUWNxQkYrM1RDVUJFQURHVXYxM1BZUVlBM2xpYlNFbEt1L3VodXBrRlBlRGFRYSt2MWFBM25FVFRXaHF5WE1uDQpxeWNkOUdiMUhCY1k2YjdjRmZTcTVIYy9OSWZuVGttVG5ZYTlTZVRFbjY0OVdRU3FEM1Yways3bW5OSmpkNS8zDQo1c3VRa0pjTkptM3pndVhBNkU0M1ZtcXRqZjZOZ2FpNTNiWWZVbnBiTzQ0TlA2a29EWkhFZjFDSzgvTU9iamExDQpGQUovbndjWXU3emloajlVckYxaVdpQ1FYSDk2a1UwUnlKMmQ0SXlvdzBZK3p2RXpjU2thM255V0NaOGpza1AzDQpWWlR0ZnRObjltTU9CaXE5emUwY1ByaEtMWWpOQlhFN21hM3grSUQvUWl0QmQ4Q0ZVbnpSMFlEcDA0a3hEelNqDQpHbFVsdEVRWWpyZTR4TW1vS0lXWmxqVm1IUlhZWWNkQXRUY0JlS3Zjaklkd2FTV2s4cXZ4VTFPUUtBYUtmUHJmDQpMMnNtL0htL1dQMU1Ib0lreDJVMldDZzlnc0Mvc3lwU3VNVVBlWkZJQjBoZ1U5TytLYm9qOE1rZUkxeXRPL3dkDQozWGtsQmdqZHNqbm5ScGp0cXIwMWNHbGsxQ05QVEVlQ0hHUms4N2E5RHVXWVpxRlVTcHVVb3lsUkk4V1ByWW1VDQpSdlhMSVV4Q2d1VzFOaHFFVHRQajBHTmlzTHJkbTl0b3pCRzRvRU54RHBpUzVpek9ITjlsYmZBQys0TkxxVzdQDQpacnpvM05WM0FmQWJZUURkY3l1aW1oNHdBWGNkWEg5Ty9MUS9lNUEvWTNEeWN4Q25tR1hEYTRhVHpXNkJqZlJODQphN3V6N2NPREoray9jU3pNb2s4cEtYZHZ6ZXF5bDVBYXgzWGFxQTBjclo1Y2tGWmN2MzZTbjZBNFNRQUZFLzhDDQpBd0lzcVFVWittVHZKbUN6NHNuSWd1YlhHNTExSDJxNlpYOHkwZ3ZNRUZhTldRc2VXVzZKWFRoeWtWRVJ3YUtWDQpOYkwwZDc3NW1YRVNxSmExNEhQVFl5VEdwL2pic2poTVBGeW9DRUxrdkZCM2kxbDRwcnlhcXJGZEdrNEJyeE9IDQpsZ0ZRcGc2Nm1zejZRbHJmaGtRTkx1UTdveDNNMzE1bDRtaEFOU1FrSHhJY2l6QVRPOFh6bUdsL0pSR2VJdE1oDQpnRzFIdHZqNVZlOFpjaXZpdm96VndXclQ3L2dpWVNZczhZa001cmxwNG42VUROelZBNmJRQzE4NEJyRXl3T1VYDQo0cnczWXFUbk1SSlNvUzlYdTM0VWQ3N0h0bjhaNHArblVGTERrNFBuNGtBTXRDT0lRYnpWZWswRzBFK3pzYWtyDQoyK1ZIOVVZZzhJNE9Vck8rbTE1ZUtKNnVuZGZDRStJdEJtaGFSeFYzbjh2OTY2VENudCs4a2tXbVVodkV0c1ZKDQpSakxRZXZHRDd4dzRRemlyZzVmVENDb1BLSEhDUlN2MEgweGxkZGZJb3REYkQ3OFBwMElhRGFpOHd5ZlJvR0tkDQpmNGdOV1pwSVdvSlBTQlV0VHVFMWplT0NHRHZKblhEaEpjckN0ZXYydVdGL2N1SHVZVnMwNTNuL0x5ZFR1Wkd2DQp5SHNoYm5udlNyUnJnL2VmTzJPK3pNRlZVQTJtMzhHSUw3ejlEWk5pRXlkaGozTjN4TDZzQXgwSFFVeCtRRktODQpxdUdBN0FCdmFKMFBxa2YvbGwzaHFUSUZPZEwyOUs0QXpYUW9yOEoxSE5hZ3VKZll1NGN1alRSdld6dGIxTHRuDQpaSjFxd1BzU1RGbEhkeGJnN2Z0eEo1Z3R0aEFZUXRPQnlCS1owZ0hpSldJbGhwZ0NXdXRJNkJYRlptcUlLcEpkDQo0L2xKQVBJOEhKWlpldHV6Q05qdlVGbmcrWGRVdjJiZ2Q0ZTUyNEhYaytnakZ0SFJ1bHlqY0dwVlMxaEFJMFpaDQpmSHRUT3VGb1ZhWTl1TUl3ZWN3dEFvNmJ2UTloOEx0RWtrT2pTOU4xRVFjT1FpWTdtaGFqYXpDM08rNjZtMTVNDQpZME9oblVkTE5ML0VuWFF6dW1qaGpEMHJZMTVWN1k4RnQydmVJUzRrYXpJTjE0dk05UUhJRGx4cUplR0VYVlY4DQp5dWd3TmxGOUpsMEFjNDVlVmtKQUtBQVZ0T3JnSTNrVzZNZ2dKMVA2aHF3Q0hTV2JyVWxBbDlVZFNDQ3R2akErDQpFckNmOUtZbVA4aVNoelh4Zi9rYzB1dFQ1TjliS3R3WUdtSW1tNUIrUFFJd1VVQkQvYmRwdTdDSFZPWkJRd1ZmDQorZlRCNjVvWVV5eGRkRkxvYk9vRjdQbmg4N2ZSN3cyay9Ta0tleXlreDJyRkQxa0Rnb0JqenRLSDBNb25MZ3hKDQpZYWt1NG5ORExBNjNwQWlJZTI5aTFjSGtVbzA5SlB3aHN0cTJoM2NVWG5ndWFRbHozYVE0YnpIUmFZVjd0OVg5DQpOTGs5bHpBY0lKSVUxNVRoQ0llTC9sdEk5NDl1N29OWERwdk1jR3o3SitIVElkaGR3ZmEvdWNNK3IzTEoyNnRLDQpKMEhud0ZLR2daZy8xUWJTQjVXM3ZyVHVQVDdJWVFKZmptR2lEV3NVNFpWWDRYdHhCd2NQSndSZkZndmwxT3ZmDQppR29reTdMY1BYV3Z6SGp1VmZMV3h0TUxaeE9xb0FoaXB3aFNDdm1Cbm9wazdYaENLUnNCMTFLeUgvcENPdnBvDQpNZGI1dERlbEFKeFppb3pSdWZ4Z2paMEtHcHptVnFWdC8wdmNsaTh0Y3lvUVEyUVlJaEdPM3NMS1JPTXhZUThCDQpTRHRzT21zTnY3ZjZMazZ5NXFhSkdJb0RFc3dJS3EzbVBqejFzNkRBcUFNUWZHYUdvQSs4QWphMGFsT01UTENIDQpqZkcyZUtvNmR2eXZwd083SmN2YUNtcTlPbE1aeDNsbkhpQ0R5U1hya09jSXhVdVNnNHJPUVNidWdLQVVna05iDQo4dUc3QS9weStrNEtPK3FmVVRZUDFhRWp3SFBsZENtWmF6dkVYeEZnMmVLTlpOdVdpeUhZQ043ZnUwb2txNmZzDQpFWEMyTzQ4MXBtMSt4MnQzbmFjN2ttanhXSHIrSTNYUXFKblB1SVpNYXRhSURlWHM3bTVvMlZvZC9pWXFZYjBnDQpYbGZmdm9kQURVTHdjVnE0NzNPc3RSNGhFSmN1OGZxZGtZcG9PV01Xb285b1Y2QmVYWElwdm5Sb0JqU1BWcUNkDQp5ekJUZTRRVG0wK3RUWXIxbTdRQWlRSWNCQkFCQWdBR0JRSmZ0MHdsQUFvSkVCZFRuS0FmbXdYMEU3TVFBSy9LDQpJN1h5WEwycGxXSXV3bDdOVWdpOVVCRU9IQ1RWVTJFMkVBVVJidHE2T0o2TVRINS95b1lJbGtHNTFvNm1nSmNnDQplc3JUSWZGaVZ0ZklNMXZLVzk1dEhEaUx3OXZvTDZRUnlRc2MzOWdyaHVJcFkzbitCK0ZETVhuUHZtV1dNeU5rDQpFdmduYW92bEtYYTdUelVVYzIrb0FFVVN4L1hMMXpzWHo0RmZ6bWc1OEJESStHMFF4UEhVdXdscjVjSmhsR0RUDQpaNEd6eTVidm9NT2MxYjJqUmlDQnh6N3dwWnJGMnoyUytJTURYSjhZcCtHanNVTEVLVVAvZFU5RmNIV09SdVJ1DQpXR09PSUdYRU4rZGIyQ2hadFJPN0o2WVVoQ0w3Y0Vtb1YxZmdOc3JpWUhFL2JFRWxtYitiR0t5QTZGRFpEb3NqDQp3eVd3MWRCa2dVdlhrREllb0xqQU1zMXdObVNXNzV5OWE3SkNqbU1pYk1oSnpZQk13ZS80SkJORExEamc5VTlIDQpZVHF2emlweHN5UkUwNkJoc2VBQmRWZWhvSEFTUEFKUXp1cFlMYkp1YXdtVE14MUJSMHA4S3NIdCswL3R0MW4wDQpiaEcxdU1KNXZtZVh5OVBLbXc2MmtEWXFtTy9EUlh3bHYrbE84OTRnbjBLTVZDN1VDNHhoYUprV21jWEY4bjVFDQpaekxCb05maTl0a2J2N1FZZVZtNEdERHVyQUQzRHZqaWZ6NnQ1ZGN0SzVRekcvMUdXdkZqOGcrcmcxTm0vcjdkDQp3Z0xTNGxXNzA0ZUF5bjN2VUQ2QW56Wk1ubHdHc0VaMHpNM1hhaUFMYnExUmhBM0dsaUdMSlpyREhFUDQrdDF4DQpwM3dTNGVzZm5NNzF5Y3ViNzg5eTJpQ3djWXRRbFY4TE8vYk9ibGpEDQo9RG1qdg0KLS0tLS1FTkQgUEdQIFBSSVZBVEUgS0VZIEJMT0NLLS0tLS0NCg=='

stages:
  - stage: BuildAzureFunctions
    displayName: 'Build Azure Functions'
  
    jobs:
    - job: BuildFunctionAppJob
      displayName: 'Build Function App Job'
      pool:
        vmImage: $(vmImageName)
  
      steps:
      - task: DotNetCoreCLI@2
        displayName: 'Build function App Task Step'
        inputs:
          command: 'build'
          projects: |
            src/functionApp/*.csproj
          arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration $(configuration)
  
      - task: ArchiveFiles@2
        displayName: 'Archive files'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
          includeRootFolder: false
          archiveType: zip
          archiveFile: $(Build.ArtifactStagingDirectory)/functionApp.$(Build.BuildId).zip
          replaceExistingArchive: true
  
      - publish: $(Build.ArtifactStagingDirectory)/functionApp.$(Build.BuildId).zip
        artifact: functionApp_drop

    - job: BuildConsoleAppJob
      displayName: 'Build Console App Job'
      pool:
        vmImage: $(vmImageName)

      steps:
      - task: DotNetCoreCLI@2
        displayName: 'Build Console App Task Step'
        inputs:
          command: 'build'
          projects: |
            src/consoleApp/*.csproj
          arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration $(configuration)
      
      - task: ArchiveFiles@2
        displayName: 'Archive files Task Step'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
          includeRootFolder: false
          archiveType: zip
          archiveFile: $(Build.ArtifactStagingDirectory)/consoleApp.$(Build.BuildId).zip
          replaceExistingArchive: true

      - publish: $(Build.ArtifactStagingDirectory)/consoleApp.$(Build.BuildId).zip
        artifact: consoleApp_drop

      - task: CopyFiles@2
        displayName: 'Copy Files Task Step'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/deploy'
          Contents: '**'
          TargetFolder: '$(Build.ArtifactStagingDirectory)/deploy'

      - publish: $(Build.ArtifactStagingDirectory)/deploy
        artifact: arm_template_drop

  - stage: DeployInfrastructure
    displayName: 'Deploy Infrastructure'
  
    jobs:
    - deployment: DeployInfrastructure
      displayName: 'Deploy Infrastructure'
      environment: 'development'
      pool:
        vmImage: $(vmImageName)
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureResourceManagerTemplateDeployment@3
              displayName: 'Validate infrastructure template'
              inputs:
                action: Create Or Update Resource Group
                azureResourceManagerConnection: '$(azureSubscription)'
                csmFile: $(Pipeline.Workspace)/arm_template_drop/azuredeploy.json
                csmParametersFile: $(Pipeline.Workspace)/arm_template_drop/azuredeploy.parameters.json
                resourceGroupName: $(resourceGroupName)
                location: $(location)
                deploymentMode: Validation
                deploymentScope: Resource Group
                overrideParameters: -location $(location) -pgpPassPhrase $(pgpPassPhrase) -pgpPublicKey $(pgpPublicKey) -pgpPrivateKey $(pgpPrivateKey)

            - task: AzureResourceManagerTemplateDeployment@3
              displayName: 'Deploy infrastructure template'
              inputs:
                action: Create Or Update Resource Group
                azureResourceManagerConnection: '$(azureSubscription)'
                csmFile: $(Pipeline.Workspace)/arm_template_drop/azuredeploy.json
                csmParametersFile: $(Pipeline.Workspace)/arm_template_drop/azuredeploy.parameters.json
                resourceGroupName: $(resourceGroupName)
                location: $(location)
                deploymentMode: Incremental
                deploymentScope: Resource Group
                deploymentName: 'deploy-infrastructure'
                overrideParameters: -location $(location) -pgpPassPhrase $(pgpPassPhrase) -pgpPublicKey $(pgpPublicKey) -pgpPrivateKey $(pgpPrivateKey)
                deploymentOutputs: infraDeploymentOutputs

            - task: PowerShell@2
              displayName: 'Get ARM Deployment Outputs'
              name: getArmOutputs
              inputs:
                targetType: 'inline'
                script: |
                  $outputs = '$(infraDeploymentOutputs)' | ConvertFrom-Json
                  foreach ($output in $outputs.PSObject.Properties) {
                    Write-Host "$($output.Name): $($output.Value.value)"
                    Write-Host "##vso[task.setvariable variable=$($output.Name);isOutput=true;]$($output.Value.value)" 
                  }

    - deployment: DeployFunctions
      displayName: 'Deploy Functions'
      environment: 'development'
      dependsOn: DeployInfrastructure
      condition: succeeded()
      pool:
        vmImage: $(vmImageName)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: AzureFunctionApp@1
              displayName: 'Function App deployment'
              inputs:
                azureSubscription: '$(azureSubscription)'
                resourceGroupName: $(resourceGroupName)
                appType: functionApp
                appName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.getArmOutputs.functionAppName'] ] #$(functionAppName)
                deploymentMethod: zipDeploy
                package: '$(Pipeline.Workspace)/functionApp_drop/functionApp.$(Build.BuildId).zip'

            - task: AzureResourceManagerTemplateDeployment@3
              displayName: 'Validate logic app template'
              inputs:
                action: Create Or Update Resource Group
                azureResourceManagerConnection: '$(azureSubscription)'
                csmFile: $(Pipeline.Workspace)/arm_template_drop/azuredeploy-logic-app.json
                csmParametersFile: $(Pipeline.Workspace)/arm_template_drop/azuredeploy-logic-app.parameters.json
                resourceGroupName: $(resourceGroupName)
                location: $(location)
                deploymentMode: Validation
                deploymentScope: Resource Group
                overrideParameters: -location $(location)

            - task: AzureResourceManagerTemplateDeployment@3
              displayName: 'Deploy logic app template'
              inputs:
                action: Create Or Update Resource Group
                azureResourceManagerConnection: '$(azureSubscription)'
                csmFile: $(Pipeline.Workspace)/arm_template_drop/azuredeploy-logic-app.json
                csmParametersFile: $(Pipeline.Workspace)/arm_template_drop/azuredeploy-logic-app.parameters.json
                resourceGroupName: $(resourceGroupName)
                location: $(location)
                deploymentMode: Incremental
                deploymentScope: Resource Group
                deploymentName: 'deploy-infrastructure'
                overrideParameters: -location $(location)
                deploymentOutputs: logicAppDeploymentOutputs
